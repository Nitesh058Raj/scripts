From 29f65af5391da6fb45ca854ca6a8239576e3b664 Mon Sep 17 00:00:00 2001
From: Krzesimir Nowak <knowak@microsoft.com>
Date: Tue, 27 Feb 2024 12:53:57 +0100
Subject: [PATCH 14/20] sysext: Add config for sysexts

Currently the supported config format has two sections: "Sysext" and "Confext".
Both sections have the same options, currently just one - "Mutable". The option
takes the same values as the "--mutable=" flag and overrides the default value
for mutability of the merged filesystems if the flag is not provided.
---
 src/sysext/sysext.c | 57 +++++++++++++++++++++++++++++++++++++--------
 1 file changed, 47 insertions(+), 10 deletions(-)

diff --git a/src/sysext/sysext.c b/src/sysext/sysext.c
index 83c027d33b..7f78e8e1eb 100644
--- a/src/sysext/sysext.c
+++ b/src/sysext/sysext.c
@@ -16,6 +16,7 @@
 #include "bus-util.h"
 #include "capability-util.h"
 #include "chase.h"
+#include "conf-parser.h"
 #include "constants.h"
 #include "devnum-util.h"
 #include "discover-image.h"
@@ -88,6 +89,7 @@ static const struct {
         const char *level_env;
         const char *scope_env;
         const char *name_env;
+        const char *config_section;
         const ImagePolicy *default_image_policy;
         unsigned long default_mount_flags;
 } image_class_info[_IMAGE_CLASS_MAX] = {
@@ -99,6 +101,7 @@ static const struct {
                 .level_env = "SYSEXT_LEVEL",
                 .scope_env = "SYSEXT_SCOPE",
                 .name_env = "SYSTEMD_SYSEXT_HIERARCHIES",
+                .config_section = "Sysext",
                 .default_image_policy = &image_policy_sysext,
                 .default_mount_flags = MS_RDONLY|MS_NODEV,
         },
@@ -110,11 +113,47 @@ static const struct {
                 .level_env = "CONFEXT_LEVEL",
                 .scope_env = "CONFEXT_SCOPE",
                 .name_env = "SYSTEMD_CONFEXT_HIERARCHIES",
+                .config_section = "Confext",
                 .default_image_policy = &image_policy_confext,
                 .default_mount_flags = MS_RDONLY|MS_NODEV|MS_NOSUID|MS_NOEXEC,
         }
 };
 
+static int parse_mutable_mode(const char *p) {
+        assert(p);
+
+        if (streq(p, "auto"))
+                return MUTABLE_AUTO;
+
+        if (streq(p, "import"))
+                return MUTABLE_IMPORT;
+
+        int r = parse_boolean(p);
+        if (r < 0)
+                return r;
+
+        return r ? MUTABLE_YES : MUTABLE_NO;
+}
+
+static int config_parse_mutable_mode(CONFIG_PARSER_ARGUMENTS);
+DEFINE_CONFIG_PARSE(config_parse_mutable_mode, parse_mutable_mode, "Failed to parse mutable mode value");
+
+static int parse_config(ImageClass image_class) {
+        const ConfigTableItem items[] = {
+                { image_class_info[image_class].config_section, "Mutable", config_parse_mutable_mode, 0, &arg_mutable },
+        };
+
+        _cleanup_free_ char *sections = NULL;
+
+        if (asprintf(&sections, "%s#", image_class_info[image_class].config_section) < 0)
+                return log_oom ();
+        sections[strlen(sections) - 1] = '\0';
+
+        return config_parse_config_file("extensions.conf", sections,
+                                        config_item_table_lookup, items,
+                                        CONFIG_PARSE_WARN | CONFIG_PARSE_RELAXED, NULL);
+}
+
 static int is_our_mount_point(
                 ImageClass image_class,
                 const char *p) {
@@ -2095,16 +2134,10 @@ static int parse_argv(int argc, char *argv[]) {
                         break;
 
                 case ARG_MUTABLE:
-                        if (streq(optarg, "auto"))
-                                arg_mutable = MUTABLE_AUTO;
-                        else if (streq(optarg, "import"))
-                                arg_mutable = MUTABLE_IMPORT;
-                        else {
-                                r = parse_boolean(optarg);
-                                if (r < 0)
-                                        return log_error_errno(r, "Failed to parse argument to --mutable=: %s", optarg);
-                                arg_mutable = r ? MUTABLE_YES : MUTABLE_NO;
-                        }
+                        r = parse_mutable_mode(optarg);
+                        if (r < 0)
+                                return log_error_errno(r, "Failed to parse argument to --mutable=: %s", optarg);
+                        arg_mutable = r;
                         break;
 
                 case '?':
@@ -2145,6 +2178,10 @@ static int run(int argc, char *argv[]) {
 
         arg_image_class = invoked_as(argv, "systemd-confext") ? IMAGE_CONFEXT : IMAGE_SYSEXT;
 
+        r = parse_config(arg_image_class);
+        if (r < 0)
+                return r;
+
         r = parse_argv(argc, argv);
         if (r <= 0)
                 return r;
-- 
2.34.1

